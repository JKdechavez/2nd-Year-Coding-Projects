class StackNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class Stack:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def push(self, data):
        node = StackNode(data)
        node.next = self.head
        self.head = node

    def pop(self):
        if not self.is_empty():
            data = self.head.data
            ptr = self.head
            self.head = self.head.next
            del ptr
            return data
        else:
            print("Stack Underflow...")

    def peek(self):
        if not self.is_empty():
            return self.head.data
        else:
            print("Stack Underflow...")

class QueueNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class Queue:
    def __init__(self):
        self.front = self.rear = None

    def is_empty(self):
        return self.front is None

    def enqueue(self, item):
        temp = QueueNode(item)
        if self.rear is None:
            self.front = self.rear = temp
            return
        self.rear.next = temp
        self.rear = temp

    def dequeue(self):
        if self.is_empty():
            return False
        temp = self.front
        self.front = temp.next
        if self.front is None:
            self.rear = None
        return temp.data

#BFS function based on description
def BFS(graph, root):
    visited = []
    result = []
    Q = Queue()
    Q.enqueue(root)
    visited.append(root)
    while not Q.is_empty():
        current = Q.dequeue()
        result.append(current)
        for n in graph[current]:
            if n not in visited:
                visited.append(n)
                Q.enqueue(n)
    return result

#DFS function based on description
def DFS(graph, root):
    visited = []
    result = []
    S = Stack()
    S.push(root)
    visited.append(root)
    while not S.is_empty():
        current = S.pop()
        result.append(current)
        for n in graph[current]:
            if n not in visited:
                visited.append(n)
                S.push(n)
    return result

#Example graph and program
G = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': [],
    'F': []
}
#Assigning a root
root = 'A'
#Implementing the functions and displaying output
BFS_result = BFS(G, root)
DFS_result = DFS(G, root)
print(f"BFS Result: {BFS_result}")
print(f"DFS Result: {DFS_result}")