class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert(self, key, value):
        new_node = Node(key, value)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def get(self, key):
        current = self.head
        while current:
            if current.key == key:
                return current.value
            current = current.next
        return None

    def delete(self, key):
        if not self.head:
            return
        ptr = self.head
        if (ptr is not None):
            if (ptr.key == key):
                self.head = ptr.next
                del ptr
                ptr = None
                return
        while (ptr is not None):
            if ptr.key == key:
                break
            prev = ptr
            ptr = ptr.next
        else:
            print("Key does not exist!")
            return

        if (ptr == None):
            return

        prev.next = ptr.next
        ptr = None

class HashTable:
    def __init__(self, size):
        self.size = size
        self.table = [LinkedList() for _ in range(size)]

    def hash_function(self, key):
        return sum(ord(char) for char in key) % self.size

    def insert(self, key, value):
        index = self.hash_function(key)
        self.table[index].insert(key, value)

    def get(self, key):
        index = self.hash_function(key)
        return self.table[index].get(key)

    def delete(self, key):
        index = self.hash_function(key)
        self.table[index].delete(key)